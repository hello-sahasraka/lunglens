from fastapi import Form
import matplotlib.pyplot as plt
import io
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib import colors
from fastapi.responses import StreamingResponse
from app.utils.image_utils import delete_image


def plot_confidence_chart(predictions):
    classes = ["Normal", "Adenocarcinoma", "Squamous Cell", "Large Cell"]

    # Calculate prediction percentages
    prediction_percentages = predictions[0] * 100
    print("Prediction Percentages:", prediction_percentages)

    # Confidence Chart
    plt.figure(figsize=(7, 6))
    plt.bar(classes, prediction_percentages, color="skyblue", edgecolor="black")
    plt.xlabel("Cancer Types", fontsize=14)
    plt.ylabel("Percentage", fontsize=14)
    plt.title("Confidence Chart", fontsize=18)

    # Save chart to an in-memory bytes buffer
    buf = io.BytesIO()
    plt.tight_layout()
    plt.savefig(buf, format="PNG", dpi=300, bbox_inches="tight")
    plt.close()
    buf.seek(0)
    return buf  # Return BytesIO object


def generate_pdf_report(predicted_class, confidence, predictions, ct_image_path=None):
    # Create an in-memory PDF buffer
    pdf_buffer = io.BytesIO()
    c = canvas.Canvas(pdf_buffer, pagesize=letter)
    width, height = letter
    margin = 50

    # Background color (optional, subtle)
    c.setFillColorRGB(0.98, 0.98, 0.98)  # light grey background
    c.rect(0, 0, width, height, fill=1, stroke=0)
    c.setFillColor(colors.black)

    # Title
    c.setFont("Helvetica-Bold", 22)
    c.drawCentredString(width / 2, height - margin, "Lung Cancer Prediction Report")

    # Divider line
    c.setStrokeColor(colors.lightgrey)
    c.setLineWidth(1)
    c.line(margin, height - margin - 10, width - margin, height - margin - 10)

    # Predicted Class & Confidence
    c.setFont("Helvetica-Bold", 16)
    c.setFillColor(colors.darkblue)
    c.drawString(margin, height - margin - 60, f"Predicted Class: {predicted_class}")

    c.setFont("Helvetica", 14)
    c.setFillColor(colors.black)
    c.drawString(margin, height - margin - 85, f"Confidence: {confidence}")

    # Divider
    c.setStrokeColor(colors.lightgrey)
    c.setLineWidth(0.5)
    c.line(margin, height - margin - 100, width - margin, height - margin - 100)

    # Position for images
    y_position = height - margin - 130

    # Add CT scan image
    if ct_image_path:
        try:
            c.drawImage(
                ct_image_path,
                margin,
                y_position - 200,
                width=500,
                height=200,
                preserveAspectRatio=True,
            )
            y_position -= 220
        except Exception as e:
            print(f"Failed to add CT image: {e}")

    # Add confidence chart
    chart_buf = plot_confidence_chart(predictions)
    chart_image = ImageReader(chart_buf)
    c.drawImage(
        chart_image,
        margin,
        y_position - 250,
        width=500,
        height=250,
        preserveAspectRatio=True,
    )

    # Footer
    c.setFont("Helvetica-Oblique", 10)
    c.setFillColor(colors.grey)
    c.drawCentredString(
        width / 2, 20, "Generated by LungLens - AI Lung Cancer Detection"
    )

    c.showPage()
    c.save()
    pdf_buffer.seek(0)

    delete_image(ct_image_path)

    return StreamingResponse(
        pdf_buffer,
        media_type="application/pdf",
        headers={"Content-Disposition": 'attachment; filename="lung_report.pdf"'},
    )
